@using PokedexApp.Shared.Models
@using PokedexApp.Shared.Models.Pokemonss

<div class="flex-row header-bar">
	<div class="row-item left-row">
		<a class="material-symbols-outlined menu-symbol" @onclick=Open>
			menu
		</a>
	</div>
	<div class="row-item middle-row">
		<a href="/" class="title">MyPokédex</a>

	</div>
	<div class="row-item right-row">
		<Searchbar Titem="Pokemon" Placeholder="Find Pokemon..." Refresh="RefreshAsync" InputUpdated="UpdateInput" GetAsync="Get" />
	</div>
</div>
@if (SidebarIsOpen)
{
	<div class="sidebar">
		<div class="flex-end">
			<a id="back-arrow" class="material-symbols-outlined back-arrow" @onclick=Close>
				arrow_back
			</a>
		</div>
		<div class="sidebar-content">
			<a>Home</a>
			<a>Pokemon</a>
			<a>Filters</a>
			<a>Berries</a>
			<a>About</a>
		</div>
	</div>
}


@code {
	[Parameter]
	public EventCallback<List<Pokemon>> Refresh { get; set; }
	private string Input { get; set; } = string.Empty;
	private bool SidebarIsOpen { get; set; } = false;

	private async Task RefreshAsync(Pokemon pokemon)
	{
		var pokemons = new List<Pokemon> { pokemon };
		await Refresh.InvokeAsync(pokemons);
	}

	public async Task<ResultModel<Pokemon>> Get()
	{
		return await Helpers.HttpHelper.GetPokemonAsync(Input);
	}

	public void UpdateInput(string input)
	{
		Input = input;
	}

	public void Open()
	{
		SidebarIsOpen = true;
		StateHasChanged();
	}

	public void Close()
	{
		SidebarIsOpen = false;
		StateHasChanged();
	}
}
